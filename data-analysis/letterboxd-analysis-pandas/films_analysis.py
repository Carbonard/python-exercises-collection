"""
Letterboxd Film Viewing Data Analysis

This script performs exploratory analysis of a user's film viewing records from Letterboxd,
generating visualizations that show:
1. Monthly distribution of films watched by year
2. Average ratings and film counts by month/year (heatmap)
3. Temporal evolution of average ratings

Dependencies:
    numpy, pandas, seaborn, matplotlib, os

Usage:
    Ensure you have CSV files with the following columns:
    - watch_date (date)
    - rating (score)
    
    These should be generated by the letterboxd_diary.py script from the
    scraping-projects/letterboxd directory in this repository.
    
    Plots will be saved automatically as PNG files in the configured output directory.
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from os import path

file_name = "sample-diary"

def save_figure(extension):# Saves the current figure to a PNG file and closes the plot
    global directory
    global file_name
    plt.savefig(path.join("data-analysis","letterboxd-analysis","outputs", file_name + "-" + extension + ".png"))
    plt.close()

# Load and prepare data
films_df = pd.read_csv(
    path.join("data-analysis","letterboxd-analysis","data", file_name + ".csv"),
    parse_dates=["watch_date"])

# Analysis 1: Monthly viewing distribution across years
# Group data by year and month, counting films watched each period
group_by_month = films_df.groupby([
    films_df["watch_date"].dt.year.rename("year"),
    films_df["watch_date"].dt.month.rename("month")
])["rating"].agg(quantity="count").reset_index()

# Create line plot showing monthly viewing patterns
sns.lineplot(x="month",
             y="quantity",
             data=group_by_month,
             hue="year",
             marker="o"
)

# Plot formatting
plt.title("Monthly Film Viewings by Year")
plt.xlabel("Month")
plt.ylabel("Number of Films Watched")
plt.xticks(range(1, 13))
plt.grid(True)
plt.tight_layout()

# Export plot as png
save_figure("plotlines")

# Analysis 2.1: Rating patterns heatmap
# Create pivot table with average ratings and counts by month/year
rating_by_month = films_df.pivot_table(
    values="rating",
    index=films_df["watch_date"].dt.year,
    columns=films_df["watch_date"].dt.month,
    aggfunc=["mean","count"],
    fill_value=0
)

# Create annotated heatmap (shows both rating averages and view counts)
sns.heatmap(rating_by_month["mean"],
            annot=rating_by_month["count"],
            mask = rating_by_month["count"] ==0,
            cmap="Blues"
)

# Plot formatting
plt.title("Monthly Average Rating (color) and Viewings (numbers) by Year")
plt.xlabel("Month")
plt.ylabel("Year")

# Export plot as png
save_figure("heatmap")

# Analysis 2.2: Rating trend analysis
# Prepare time-series data of average ratings
ratings_by_year_and_month = films_df.groupby([
    films_df["watch_date"].dt.year.rename("year")
])["rating"].mean().reset_index()

# Create trend line plot
sns.lineplot(data=ratings_by_year_and_month, x="year", y="rating")

# Plot formatting
plt.title("Average Rating Trend Over Time", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Rating means", fontsize=12)
plt.xticks(range(2013, 2026))
plt.xticks(rotation=60)
plt.grid(alpha=0.3)
plt.tight_layout()

# Export plot as png
save_figure("plotline")